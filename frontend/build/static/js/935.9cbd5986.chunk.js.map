{"version":3,"file":"static/js/935.9cbd5986.chunk.js","mappings":"gJACA,MAAMA,EAAeC,yEAERC,EAAW,CAEtBC,cAAeC,UACb,MAAMC,QAAiBC,MAAM,GAADC,OAAIP,EAAY,uBAAuB,CACjEQ,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,OAAQC,EAAUD,OAClBE,MAAOD,EAAUC,MACjBC,KAAMF,EAAUG,MAChBC,kBAAmBJ,EAAUK,eAAgB,EAC7CC,QAASN,EAAUO,QAAU,mBAIjC,IAAKhB,EAASiB,GAAI,CAChB,MAAMC,QAAclB,EAASmB,OAC7B,MAAM,IAAIC,MAAMF,EAAMG,QAAU,2BAClC,CAEA,OAAOrB,EAASmB,MAAM,EAIxBG,iBAAkBvB,UAChB,MAAMC,QAAiBC,MAAM,GAADC,OAAIP,EAAY,sBAAAO,OAAqBqB,GAAW,CAC1EpB,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAIpB,IAAKJ,EAASiB,GAAI,CAChB,MAAMC,QAAclB,EAASmB,OAC7B,MAAM,IAAIC,MAAMF,EAAMG,QAAU,+BAClC,CAEA,OAAOrB,EAASmB,MAAM,EAIxBK,aAAczB,UACZ,MAAMC,QAAiBC,MAAM,GAADC,OAAIP,EAAY,oBAAAO,OAAmBc,GAAU,CACvEb,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAIpB,IAAKJ,EAASiB,GAAI,CAChB,MAAMC,QAAclB,EAASmB,OAC7B,MAAM,IAAIC,MAAMF,EAAMG,QAAU,6BAClC,CAEA,OAAOrB,EAASmB,MAAM,GAKbM,EAAkB1B,eAAOwB,EAASG,GAAkC,IAAtBC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACnEG,EAAW,EAEf,KAAOA,EAAWJ,GAChB,IACE,MAAMK,QAAenC,EAASyB,iBAAiBC,GAM/C,GAJIG,GACFA,EAAWM,GAGS,cAAlBA,EAAOA,OACT,OAAOA,EACF,GAAsB,WAAlBA,EAAOA,OAChB,MAAM,IAAIZ,MAAM,iCAIZ,IAAIa,SAAQC,GAAWC,WAAWD,EAAS,OACjDH,GACF,CAAE,MAAOb,GACPkB,QAAQlB,MAAM,8BAA+BA,GAC7Ca,UACM,IAAIE,SAAQC,GAAWC,WAAWD,EAAS,MACnD,CAGF,MAAM,IAAId,MAAM,6BAClB,C","sources":["musicAPI.js"],"sourcesContent":["// Music API service for Suno AI integration\nconst API_BASE_URL = process.env.REACT_APP_BACKEND_URL;\n\nexport const musicAPI = {\n  // Generate music using Suno AI\n  generateMusic: async (musicData) => {\n    const response = await fetch(`${API_BASE_URL}/api/music/generate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        prompt: musicData.prompt,\n        title: musicData.title,\n        tags: musicData.genre, // Using genre as tags for now\n        make_instrumental: musicData.instrumental || false,\n        user_id: musicData.userId || 'default_user'\n      }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.detail || 'Failed to generate music');\n    }\n\n    return response.json();\n  },\n\n  // Check music generation status\n  checkMusicStatus: async (musicId) => {\n    const response = await fetch(`${API_BASE_URL}/api/music/status/${musicId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.detail || 'Failed to check music status');\n    }\n\n    return response.json();\n  },\n\n  // Get user's music\n  getUserMusic: async (userId) => {\n    const response = await fetch(`${API_BASE_URL}/api/music/user/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.detail || 'Failed to fetch user music');\n    }\n\n    return response.json();\n  },\n};\n\n// Utility function to poll music status until completion\nexport const pollMusicStatus = async (musicId, onProgress, maxAttempts = 30) => {\n  let attempts = 0;\n  \n  while (attempts < maxAttempts) {\n    try {\n      const status = await musicAPI.checkMusicStatus(musicId);\n      \n      if (onProgress) {\n        onProgress(status);\n      }\n      \n      if (status.status === 'completed') {\n        return status;\n      } else if (status.status === 'failed') {\n        throw new Error('Music generation failed');\n      }\n      \n      // Wait 5 seconds before next poll\n      await new Promise(resolve => setTimeout(resolve, 5000));\n      attempts++;\n    } catch (error) {\n      console.error('Error polling music status:', error);\n      attempts++;\n      await new Promise(resolve => setTimeout(resolve, 5000));\n    }\n  }\n  \n  throw new Error('Music generation timed out');\n};"],"names":["API_BASE_URL","process","musicAPI","generateMusic","async","response","fetch","concat","method","headers","body","JSON","stringify","prompt","musicData","title","tags","genre","make_instrumental","instrumental","user_id","userId","ok","error","json","Error","detail","checkMusicStatus","musicId","getUserMusic","pollMusicStatus","onProgress","maxAttempts","arguments","length","undefined","attempts","status","Promise","resolve","setTimeout","console"],"sourceRoot":""}